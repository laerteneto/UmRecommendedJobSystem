//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace recommenderSystems.JobService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CategoryDto", Namespace="http://schemas.datacontract.org/2004/07/UMNewJobWebsite.DomainDTO")]
    [System.SerializableAttribute()]
    public partial class CategoryDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryDescription {
            get {
                return this.CategoryDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryDescriptionField, value) != true)) {
                    this.CategoryDescriptionField = value;
                    this.RaisePropertyChanged("CategoryDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryIdField, value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompensationDto", Namespace="http://schemas.datacontract.org/2004/07/UMNewJobWebsite.DomainDTO")]
    [System.SerializableAttribute()]
    public partial class CompensationDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompensationDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompensationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompensationTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompensationDescription {
            get {
                return this.CompensationDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CompensationDescriptionField, value) != true)) {
                    this.CompensationDescriptionField = value;
                    this.RaisePropertyChanged("CompensationDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompensationId {
            get {
                return this.CompensationIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CompensationIdField, value) != true)) {
                    this.CompensationIdField = value;
                    this.RaisePropertyChanged("CompensationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompensationType {
            get {
                return this.CompensationTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CompensationTypeField, value) != true)) {
                    this.CompensationTypeField = value;
                    this.RaisePropertyChanged("CompensationType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmployerDto", Namespace="http://schemas.datacontract.org/2004/07/UMNewJobWebsite.DomainDTO")]
    [System.SerializableAttribute()]
    public partial class EmployerDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EmployerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmployerNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EmployerId {
            get {
                return this.EmployerIdField;
            }
            set {
                if ((this.EmployerIdField.Equals(value) != true)) {
                    this.EmployerIdField = value;
                    this.RaisePropertyChanged("EmployerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmployerName {
            get {
                return this.EmployerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EmployerNameField, value) != true)) {
                    this.EmployerNameField = value;
                    this.RaisePropertyChanged("EmployerName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobDto", Namespace="http://schemas.datacontract.org/2004/07/UMNewJobWebsite.DomainDTO")]
    [System.SerializableAttribute()]
    public partial class JobDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompensationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid EmployerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double JobCompensationValueField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double JobExperienceLevelField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid JobIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string JobNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int JobQuotaField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompensationId {
            get {
                return this.CompensationIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CompensationIdField, value) != true)) {
                    this.CompensationIdField = value;
                    this.RaisePropertyChanged("CompensationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid EmployerId {
            get {
                return this.EmployerIdField;
            }
            set {
                if ((this.EmployerIdField.Equals(value) != true)) {
                    this.EmployerIdField = value;
                    this.RaisePropertyChanged("EmployerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double JobCompensationValue {
            get {
                return this.JobCompensationValueField;
            }
            set {
                if ((this.JobCompensationValueField.Equals(value) != true)) {
                    this.JobCompensationValueField = value;
                    this.RaisePropertyChanged("JobCompensationValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobDescription {
            get {
                return this.JobDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.JobDescriptionField, value) != true)) {
                    this.JobDescriptionField = value;
                    this.RaisePropertyChanged("JobDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double JobExperienceLevel {
            get {
                return this.JobExperienceLevelField;
            }
            set {
                if ((this.JobExperienceLevelField.Equals(value) != true)) {
                    this.JobExperienceLevelField = value;
                    this.RaisePropertyChanged("JobExperienceLevel");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid JobId {
            get {
                return this.JobIdField;
            }
            set {
                if ((this.JobIdField.Equals(value) != true)) {
                    this.JobIdField = value;
                    this.RaisePropertyChanged("JobId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobName {
            get {
                return this.JobNameField;
            }
            set {
                if ((object.ReferenceEquals(this.JobNameField, value) != true)) {
                    this.JobNameField = value;
                    this.RaisePropertyChanged("JobName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int JobQuota {
            get {
                return this.JobQuotaField;
            }
            set {
                if ((this.JobQuotaField.Equals(value) != true)) {
                    this.JobQuotaField = value;
                    this.RaisePropertyChanged("JobQuota");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SkillDto", Namespace="http://schemas.datacontract.org/2004/07/UMNewJobWebsite.DomainDTO")]
    [System.SerializableAttribute()]
    public partial class SkillDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SkillDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SkillIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SkillNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkillDescription {
            get {
                return this.SkillDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.SkillDescriptionField, value) != true)) {
                    this.SkillDescriptionField = value;
                    this.RaisePropertyChanged("SkillDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkillId {
            get {
                return this.SkillIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SkillIdField, value) != true)) {
                    this.SkillIdField = value;
                    this.RaisePropertyChanged("SkillId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SkillName {
            get {
                return this.SkillNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SkillNameField, value) != true)) {
                    this.SkillNameField = value;
                    this.RaisePropertyChanged("SkillName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JobService.IServiceWCF")]
    public interface IServiceWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllCategory", ReplyAction="http://tempuri.org/IServiceWCF/selectAllCategoryResponse")]
        recommenderSystems.JobService.CategoryDto[] selectAllCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllCategory", ReplyAction="http://tempuri.org/IServiceWCF/selectAllCategoryResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.CategoryDto[]> selectAllCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectCategoryById", ReplyAction="http://tempuri.org/IServiceWCF/selectCategoryByIdResponse")]
        recommenderSystems.JobService.CategoryDto selectCategoryById(recommenderSystems.JobService.CategoryDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectCategoryById", ReplyAction="http://tempuri.org/IServiceWCF/selectCategoryByIdResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.CategoryDto> selectCategoryByIdAsync(recommenderSystems.JobService.CategoryDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertCategory", ReplyAction="http://tempuri.org/IServiceWCF/insertCategoryResponse")]
        bool insertCategory(recommenderSystems.JobService.CategoryDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertCategory", ReplyAction="http://tempuri.org/IServiceWCF/insertCategoryResponse")]
        System.Threading.Tasks.Task<bool> insertCategoryAsync(recommenderSystems.JobService.CategoryDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateCategory", ReplyAction="http://tempuri.org/IServiceWCF/updateCategoryResponse")]
        bool updateCategory(recommenderSystems.JobService.CategoryDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateCategory", ReplyAction="http://tempuri.org/IServiceWCF/updateCategoryResponse")]
        System.Threading.Tasks.Task<bool> updateCategoryAsync(recommenderSystems.JobService.CategoryDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteCategory", ReplyAction="http://tempuri.org/IServiceWCF/deleteCategoryResponse")]
        bool deleteCategory(recommenderSystems.JobService.CategoryDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteCategory", ReplyAction="http://tempuri.org/IServiceWCF/deleteCategoryResponse")]
        System.Threading.Tasks.Task<bool> deleteCategoryAsync(recommenderSystems.JobService.CategoryDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllCompensation", ReplyAction="http://tempuri.org/IServiceWCF/selectAllCompensationResponse")]
        recommenderSystems.JobService.CompensationDto[] selectAllCompensation();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllCompensation", ReplyAction="http://tempuri.org/IServiceWCF/selectAllCompensationResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.CompensationDto[]> selectAllCompensationAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectCompensationById", ReplyAction="http://tempuri.org/IServiceWCF/selectCompensationByIdResponse")]
        recommenderSystems.JobService.CompensationDto selectCompensationById(recommenderSystems.JobService.CompensationDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectCompensationById", ReplyAction="http://tempuri.org/IServiceWCF/selectCompensationByIdResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.CompensationDto> selectCompensationByIdAsync(recommenderSystems.JobService.CompensationDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertCompensation", ReplyAction="http://tempuri.org/IServiceWCF/insertCompensationResponse")]
        bool insertCompensation(recommenderSystems.JobService.CompensationDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertCompensation", ReplyAction="http://tempuri.org/IServiceWCF/insertCompensationResponse")]
        System.Threading.Tasks.Task<bool> insertCompensationAsync(recommenderSystems.JobService.CompensationDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateCompensation", ReplyAction="http://tempuri.org/IServiceWCF/updateCompensationResponse")]
        bool updateCompensation(recommenderSystems.JobService.CompensationDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateCompensation", ReplyAction="http://tempuri.org/IServiceWCF/updateCompensationResponse")]
        System.Threading.Tasks.Task<bool> updateCompensationAsync(recommenderSystems.JobService.CompensationDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteCompensation", ReplyAction="http://tempuri.org/IServiceWCF/deleteCompensationResponse")]
        bool deleteCompensation(recommenderSystems.JobService.CompensationDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteCompensation", ReplyAction="http://tempuri.org/IServiceWCF/deleteCompensationResponse")]
        System.Threading.Tasks.Task<bool> deleteCompensationAsync(recommenderSystems.JobService.CompensationDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllEmployer", ReplyAction="http://tempuri.org/IServiceWCF/selectAllEmployerResponse")]
        recommenderSystems.JobService.EmployerDto[] selectAllEmployer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllEmployer", ReplyAction="http://tempuri.org/IServiceWCF/selectAllEmployerResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.EmployerDto[]> selectAllEmployerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectEmployerById", ReplyAction="http://tempuri.org/IServiceWCF/selectEmployerByIdResponse")]
        recommenderSystems.JobService.EmployerDto selectEmployerById(recommenderSystems.JobService.EmployerDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectEmployerById", ReplyAction="http://tempuri.org/IServiceWCF/selectEmployerByIdResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.EmployerDto> selectEmployerByIdAsync(recommenderSystems.JobService.EmployerDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertEmployer", ReplyAction="http://tempuri.org/IServiceWCF/insertEmployerResponse")]
        bool insertEmployer(recommenderSystems.JobService.EmployerDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertEmployer", ReplyAction="http://tempuri.org/IServiceWCF/insertEmployerResponse")]
        System.Threading.Tasks.Task<bool> insertEmployerAsync(recommenderSystems.JobService.EmployerDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateEmployer", ReplyAction="http://tempuri.org/IServiceWCF/updateEmployerResponse")]
        bool updateEmployer(recommenderSystems.JobService.EmployerDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateEmployer", ReplyAction="http://tempuri.org/IServiceWCF/updateEmployerResponse")]
        System.Threading.Tasks.Task<bool> updateEmployerAsync(recommenderSystems.JobService.EmployerDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteEmployer", ReplyAction="http://tempuri.org/IServiceWCF/deleteEmployerResponse")]
        bool deleteEmployer(recommenderSystems.JobService.EmployerDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteEmployer", ReplyAction="http://tempuri.org/IServiceWCF/deleteEmployerResponse")]
        System.Threading.Tasks.Task<bool> deleteEmployerAsync(recommenderSystems.JobService.EmployerDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllJob", ReplyAction="http://tempuri.org/IServiceWCF/selectAllJobResponse")]
        recommenderSystems.JobService.JobDto[] selectAllJob();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllJob", ReplyAction="http://tempuri.org/IServiceWCF/selectAllJobResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto[]> selectAllJobAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectJobNotDoneByRecruiteeIdRecommendation", ReplyAction="http://tempuri.org/IServiceWCF/selectJobNotDoneByRecruiteeIdRecommendationRespons" +
            "e")]
        recommenderSystems.JobService.JobDto[] selectJobNotDoneByRecruiteeIdRecommendation(string recruiteeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectJobNotDoneByRecruiteeIdRecommendation", ReplyAction="http://tempuri.org/IServiceWCF/selectJobNotDoneByRecruiteeIdRecommendationRespons" +
            "e")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto[]> selectJobNotDoneByRecruiteeIdRecommendationAsync(string recruiteeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectJobIdNotDoneByRecruiteeId", ReplyAction="http://tempuri.org/IServiceWCF/selectJobIdNotDoneByRecruiteeIdResponse")]
        recommenderSystems.JobService.JobDto[] selectJobIdNotDoneByRecruiteeId(string recruiteeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectJobIdNotDoneByRecruiteeId", ReplyAction="http://tempuri.org/IServiceWCF/selectJobIdNotDoneByRecruiteeIdResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto[]> selectJobIdNotDoneByRecruiteeIdAsync(string recruiteeId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectJobById", ReplyAction="http://tempuri.org/IServiceWCF/selectJobByIdResponse")]
        recommenderSystems.JobService.JobDto selectJobById(recommenderSystems.JobService.JobDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectJobById", ReplyAction="http://tempuri.org/IServiceWCF/selectJobByIdResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto> selectJobByIdAsync(recommenderSystems.JobService.JobDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertJob", ReplyAction="http://tempuri.org/IServiceWCF/insertJobResponse")]
        bool insertJob(recommenderSystems.JobService.JobDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertJob", ReplyAction="http://tempuri.org/IServiceWCF/insertJobResponse")]
        System.Threading.Tasks.Task<bool> insertJobAsync(recommenderSystems.JobService.JobDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateJob", ReplyAction="http://tempuri.org/IServiceWCF/updateJobResponse")]
        bool updateJob(recommenderSystems.JobService.JobDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateJob", ReplyAction="http://tempuri.org/IServiceWCF/updateJobResponse")]
        System.Threading.Tasks.Task<bool> updateJobAsync(recommenderSystems.JobService.JobDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteJob", ReplyAction="http://tempuri.org/IServiceWCF/deleteJobResponse")]
        bool deleteJob(recommenderSystems.JobService.JobDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteJob", ReplyAction="http://tempuri.org/IServiceWCF/deleteJobResponse")]
        System.Threading.Tasks.Task<bool> deleteJobAsync(recommenderSystems.JobService.JobDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/createJobDTO", ReplyAction="http://tempuri.org/IServiceWCF/createJobDTOResponse")]
        recommenderSystems.JobService.JobDto createJobDTO(System.Guid JobId, string JobName, string CompensationId, System.Guid EmployerId, string JobDescription, int JobQuota, double JobExperienceLevel, double JobCompensationValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/createJobDTO", ReplyAction="http://tempuri.org/IServiceWCF/createJobDTOResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto> createJobDTOAsync(System.Guid JobId, string JobName, string CompensationId, System.Guid EmployerId, string JobDescription, int JobQuota, double JobExperienceLevel, double JobCompensationValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/addSkillToJob", ReplyAction="http://tempuri.org/IServiceWCF/addSkillToJobResponse")]
        bool addSkillToJob(System.Guid JobId, string SkillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/addSkillToJob", ReplyAction="http://tempuri.org/IServiceWCF/addSkillToJobResponse")]
        System.Threading.Tasks.Task<bool> addSkillToJobAsync(System.Guid JobId, string SkillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/removeSkillFromJob", ReplyAction="http://tempuri.org/IServiceWCF/removeSkillFromJobResponse")]
        bool removeSkillFromJob(System.Guid JobId, string SkillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/removeSkillFromJob", ReplyAction="http://tempuri.org/IServiceWCF/removeSkillFromJobResponse")]
        System.Threading.Tasks.Task<bool> removeSkillFromJobAsync(System.Guid JobId, string SkillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectJobBySkillId", ReplyAction="http://tempuri.org/IServiceWCF/selectJobBySkillIdResponse")]
        recommenderSystems.JobService.JobDto[] selectJobBySkillId(string skillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectJobBySkillId", ReplyAction="http://tempuri.org/IServiceWCF/selectJobBySkillIdResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto[]> selectJobBySkillIdAsync(string skillId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectExpressionNames", ReplyAction="http://tempuri.org/IServiceWCF/selectExpressionNamesResponse")]
        System.Guid[] selectExpressionNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectExpressionNames", ReplyAction="http://tempuri.org/IServiceWCF/selectExpressionNamesResponse")]
        System.Threading.Tasks.Task<System.Guid[]> selectExpressionNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectExpressionDifficulty", ReplyAction="http://tempuri.org/IServiceWCF/selectExpressionDifficultyResponse")]
        double[] selectExpressionDifficulty();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectExpressionDifficulty", ReplyAction="http://tempuri.org/IServiceWCF/selectExpressionDifficultyResponse")]
        System.Threading.Tasks.Task<double[]> selectExpressionDifficultyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllSkill", ReplyAction="http://tempuri.org/IServiceWCF/selectAllSkillResponse")]
        recommenderSystems.JobService.SkillDto[] selectAllSkill();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectAllSkill", ReplyAction="http://tempuri.org/IServiceWCF/selectAllSkillResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.SkillDto[]> selectAllSkillAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectSkillById", ReplyAction="http://tempuri.org/IServiceWCF/selectSkillByIdResponse")]
        recommenderSystems.JobService.SkillDto selectSkillById(recommenderSystems.JobService.SkillDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/selectSkillById", ReplyAction="http://tempuri.org/IServiceWCF/selectSkillByIdResponse")]
        System.Threading.Tasks.Task<recommenderSystems.JobService.SkillDto> selectSkillByIdAsync(recommenderSystems.JobService.SkillDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertSkill", ReplyAction="http://tempuri.org/IServiceWCF/insertSkillResponse")]
        bool insertSkill(recommenderSystems.JobService.SkillDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/insertSkill", ReplyAction="http://tempuri.org/IServiceWCF/insertSkillResponse")]
        System.Threading.Tasks.Task<bool> insertSkillAsync(recommenderSystems.JobService.SkillDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateSkill", ReplyAction="http://tempuri.org/IServiceWCF/updateSkillResponse")]
        bool updateSkill(recommenderSystems.JobService.SkillDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/updateSkill", ReplyAction="http://tempuri.org/IServiceWCF/updateSkillResponse")]
        System.Threading.Tasks.Task<bool> updateSkillAsync(recommenderSystems.JobService.SkillDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteSkill", ReplyAction="http://tempuri.org/IServiceWCF/deleteSkillResponse")]
        bool deleteSkill(recommenderSystems.JobService.SkillDto obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWCF/deleteSkill", ReplyAction="http://tempuri.org/IServiceWCF/deleteSkillResponse")]
        System.Threading.Tasks.Task<bool> deleteSkillAsync(recommenderSystems.JobService.SkillDto obj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceWCFChannel : recommenderSystems.JobService.IServiceWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceWCFClient : System.ServiceModel.ClientBase<recommenderSystems.JobService.IServiceWCF>, recommenderSystems.JobService.IServiceWCF {
        
        public ServiceWCFClient() {
        }
        
        public ServiceWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public recommenderSystems.JobService.CategoryDto[] selectAllCategory() {
            return base.Channel.selectAllCategory();
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.CategoryDto[]> selectAllCategoryAsync() {
            return base.Channel.selectAllCategoryAsync();
        }
        
        public recommenderSystems.JobService.CategoryDto selectCategoryById(recommenderSystems.JobService.CategoryDto obj) {
            return base.Channel.selectCategoryById(obj);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.CategoryDto> selectCategoryByIdAsync(recommenderSystems.JobService.CategoryDto obj) {
            return base.Channel.selectCategoryByIdAsync(obj);
        }
        
        public bool insertCategory(recommenderSystems.JobService.CategoryDto obj) {
            return base.Channel.insertCategory(obj);
        }
        
        public System.Threading.Tasks.Task<bool> insertCategoryAsync(recommenderSystems.JobService.CategoryDto obj) {
            return base.Channel.insertCategoryAsync(obj);
        }
        
        public bool updateCategory(recommenderSystems.JobService.CategoryDto obj) {
            return base.Channel.updateCategory(obj);
        }
        
        public System.Threading.Tasks.Task<bool> updateCategoryAsync(recommenderSystems.JobService.CategoryDto obj) {
            return base.Channel.updateCategoryAsync(obj);
        }
        
        public bool deleteCategory(recommenderSystems.JobService.CategoryDto obj) {
            return base.Channel.deleteCategory(obj);
        }
        
        public System.Threading.Tasks.Task<bool> deleteCategoryAsync(recommenderSystems.JobService.CategoryDto obj) {
            return base.Channel.deleteCategoryAsync(obj);
        }
        
        public recommenderSystems.JobService.CompensationDto[] selectAllCompensation() {
            return base.Channel.selectAllCompensation();
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.CompensationDto[]> selectAllCompensationAsync() {
            return base.Channel.selectAllCompensationAsync();
        }
        
        public recommenderSystems.JobService.CompensationDto selectCompensationById(recommenderSystems.JobService.CompensationDto obj) {
            return base.Channel.selectCompensationById(obj);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.CompensationDto> selectCompensationByIdAsync(recommenderSystems.JobService.CompensationDto obj) {
            return base.Channel.selectCompensationByIdAsync(obj);
        }
        
        public bool insertCompensation(recommenderSystems.JobService.CompensationDto obj) {
            return base.Channel.insertCompensation(obj);
        }
        
        public System.Threading.Tasks.Task<bool> insertCompensationAsync(recommenderSystems.JobService.CompensationDto obj) {
            return base.Channel.insertCompensationAsync(obj);
        }
        
        public bool updateCompensation(recommenderSystems.JobService.CompensationDto obj) {
            return base.Channel.updateCompensation(obj);
        }
        
        public System.Threading.Tasks.Task<bool> updateCompensationAsync(recommenderSystems.JobService.CompensationDto obj) {
            return base.Channel.updateCompensationAsync(obj);
        }
        
        public bool deleteCompensation(recommenderSystems.JobService.CompensationDto obj) {
            return base.Channel.deleteCompensation(obj);
        }
        
        public System.Threading.Tasks.Task<bool> deleteCompensationAsync(recommenderSystems.JobService.CompensationDto obj) {
            return base.Channel.deleteCompensationAsync(obj);
        }
        
        public recommenderSystems.JobService.EmployerDto[] selectAllEmployer() {
            return base.Channel.selectAllEmployer();
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.EmployerDto[]> selectAllEmployerAsync() {
            return base.Channel.selectAllEmployerAsync();
        }
        
        public recommenderSystems.JobService.EmployerDto selectEmployerById(recommenderSystems.JobService.EmployerDto obj) {
            return base.Channel.selectEmployerById(obj);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.EmployerDto> selectEmployerByIdAsync(recommenderSystems.JobService.EmployerDto obj) {
            return base.Channel.selectEmployerByIdAsync(obj);
        }
        
        public bool insertEmployer(recommenderSystems.JobService.EmployerDto obj) {
            return base.Channel.insertEmployer(obj);
        }
        
        public System.Threading.Tasks.Task<bool> insertEmployerAsync(recommenderSystems.JobService.EmployerDto obj) {
            return base.Channel.insertEmployerAsync(obj);
        }
        
        public bool updateEmployer(recommenderSystems.JobService.EmployerDto obj) {
            return base.Channel.updateEmployer(obj);
        }
        
        public System.Threading.Tasks.Task<bool> updateEmployerAsync(recommenderSystems.JobService.EmployerDto obj) {
            return base.Channel.updateEmployerAsync(obj);
        }
        
        public bool deleteEmployer(recommenderSystems.JobService.EmployerDto obj) {
            return base.Channel.deleteEmployer(obj);
        }
        
        public System.Threading.Tasks.Task<bool> deleteEmployerAsync(recommenderSystems.JobService.EmployerDto obj) {
            return base.Channel.deleteEmployerAsync(obj);
        }
        
        public recommenderSystems.JobService.JobDto[] selectAllJob() {
            return base.Channel.selectAllJob();
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto[]> selectAllJobAsync() {
            return base.Channel.selectAllJobAsync();
        }
        
        public recommenderSystems.JobService.JobDto[] selectJobNotDoneByRecruiteeIdRecommendation(string recruiteeId) {
            return base.Channel.selectJobNotDoneByRecruiteeIdRecommendation(recruiteeId);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto[]> selectJobNotDoneByRecruiteeIdRecommendationAsync(string recruiteeId) {
            return base.Channel.selectJobNotDoneByRecruiteeIdRecommendationAsync(recruiteeId);
        }
        
        public recommenderSystems.JobService.JobDto[] selectJobIdNotDoneByRecruiteeId(string recruiteeId) {
            return base.Channel.selectJobIdNotDoneByRecruiteeId(recruiteeId);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto[]> selectJobIdNotDoneByRecruiteeIdAsync(string recruiteeId) {
            return base.Channel.selectJobIdNotDoneByRecruiteeIdAsync(recruiteeId);
        }
        
        public recommenderSystems.JobService.JobDto selectJobById(recommenderSystems.JobService.JobDto obj) {
            return base.Channel.selectJobById(obj);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto> selectJobByIdAsync(recommenderSystems.JobService.JobDto obj) {
            return base.Channel.selectJobByIdAsync(obj);
        }
        
        public bool insertJob(recommenderSystems.JobService.JobDto obj) {
            return base.Channel.insertJob(obj);
        }
        
        public System.Threading.Tasks.Task<bool> insertJobAsync(recommenderSystems.JobService.JobDto obj) {
            return base.Channel.insertJobAsync(obj);
        }
        
        public bool updateJob(recommenderSystems.JobService.JobDto obj) {
            return base.Channel.updateJob(obj);
        }
        
        public System.Threading.Tasks.Task<bool> updateJobAsync(recommenderSystems.JobService.JobDto obj) {
            return base.Channel.updateJobAsync(obj);
        }
        
        public bool deleteJob(recommenderSystems.JobService.JobDto obj) {
            return base.Channel.deleteJob(obj);
        }
        
        public System.Threading.Tasks.Task<bool> deleteJobAsync(recommenderSystems.JobService.JobDto obj) {
            return base.Channel.deleteJobAsync(obj);
        }
        
        public recommenderSystems.JobService.JobDto createJobDTO(System.Guid JobId, string JobName, string CompensationId, System.Guid EmployerId, string JobDescription, int JobQuota, double JobExperienceLevel, double JobCompensationValue) {
            return base.Channel.createJobDTO(JobId, JobName, CompensationId, EmployerId, JobDescription, JobQuota, JobExperienceLevel, JobCompensationValue);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto> createJobDTOAsync(System.Guid JobId, string JobName, string CompensationId, System.Guid EmployerId, string JobDescription, int JobQuota, double JobExperienceLevel, double JobCompensationValue) {
            return base.Channel.createJobDTOAsync(JobId, JobName, CompensationId, EmployerId, JobDescription, JobQuota, JobExperienceLevel, JobCompensationValue);
        }
        
        public bool addSkillToJob(System.Guid JobId, string SkillId) {
            return base.Channel.addSkillToJob(JobId, SkillId);
        }
        
        public System.Threading.Tasks.Task<bool> addSkillToJobAsync(System.Guid JobId, string SkillId) {
            return base.Channel.addSkillToJobAsync(JobId, SkillId);
        }
        
        public bool removeSkillFromJob(System.Guid JobId, string SkillId) {
            return base.Channel.removeSkillFromJob(JobId, SkillId);
        }
        
        public System.Threading.Tasks.Task<bool> removeSkillFromJobAsync(System.Guid JobId, string SkillId) {
            return base.Channel.removeSkillFromJobAsync(JobId, SkillId);
        }
        
        public recommenderSystems.JobService.JobDto[] selectJobBySkillId(string skillId) {
            return base.Channel.selectJobBySkillId(skillId);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.JobDto[]> selectJobBySkillIdAsync(string skillId) {
            return base.Channel.selectJobBySkillIdAsync(skillId);
        }
        
        public System.Guid[] selectExpressionNames() {
            return base.Channel.selectExpressionNames();
        }
        
        public System.Threading.Tasks.Task<System.Guid[]> selectExpressionNamesAsync() {
            return base.Channel.selectExpressionNamesAsync();
        }
        
        public double[] selectExpressionDifficulty() {
            return base.Channel.selectExpressionDifficulty();
        }
        
        public System.Threading.Tasks.Task<double[]> selectExpressionDifficultyAsync() {
            return base.Channel.selectExpressionDifficultyAsync();
        }
        
        public recommenderSystems.JobService.SkillDto[] selectAllSkill() {
            return base.Channel.selectAllSkill();
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.SkillDto[]> selectAllSkillAsync() {
            return base.Channel.selectAllSkillAsync();
        }
        
        public recommenderSystems.JobService.SkillDto selectSkillById(recommenderSystems.JobService.SkillDto obj) {
            return base.Channel.selectSkillById(obj);
        }
        
        public System.Threading.Tasks.Task<recommenderSystems.JobService.SkillDto> selectSkillByIdAsync(recommenderSystems.JobService.SkillDto obj) {
            return base.Channel.selectSkillByIdAsync(obj);
        }
        
        public bool insertSkill(recommenderSystems.JobService.SkillDto obj) {
            return base.Channel.insertSkill(obj);
        }
        
        public System.Threading.Tasks.Task<bool> insertSkillAsync(recommenderSystems.JobService.SkillDto obj) {
            return base.Channel.insertSkillAsync(obj);
        }
        
        public bool updateSkill(recommenderSystems.JobService.SkillDto obj) {
            return base.Channel.updateSkill(obj);
        }
        
        public System.Threading.Tasks.Task<bool> updateSkillAsync(recommenderSystems.JobService.SkillDto obj) {
            return base.Channel.updateSkillAsync(obj);
        }
        
        public bool deleteSkill(recommenderSystems.JobService.SkillDto obj) {
            return base.Channel.deleteSkill(obj);
        }
        
        public System.Threading.Tasks.Task<bool> deleteSkillAsync(recommenderSystems.JobService.SkillDto obj) {
            return base.Channel.deleteSkillAsync(obj);
        }
    }
}
